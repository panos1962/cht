#!/usr/bin/env bash

###############################################################################@
#
# Copyright (C) 2019 Panos I. Papadopoulos <panos1962_AT_gmail_DOT_com>
#
###############################################################################@
#
# Το πρόγραμμα διαβάζει δεδομένα οχημάτων/κατόχων που έχουν παραληφθεί από την
# πλατφόρμα "govHUB" μέσω του προγράμματος "GH/carget" και επιτελεί κάποιου
# είδους επιπεδοποίηση των δεδομένων αυτών. Πράγματι, τα δεδομένα οχημάτων που
# επιστρέφει η πλατφόρμα "govHUB" είναι JSON objects και ως εκ τούτου είναι
# μάλλον δύσκολο να τα διαχειριστούμε εκτός javascript προγραμμάτων.
#
# Επιστρατεύουμε λοιπόν το φανταστικό εργαλείο "jq" το οποίο είναι ακριβώς ένας
# πολύ χρήσιμος JSON parser, προκειμένου να εκτυπώσουμε τα στοιχεία που θέλουμε
# σε γραμμική μορφή και πιο συγκεκριμένα key/value pairs χωρισμένα μεταξύ τους
# με tabs.
#
# Το πρόγραμμα δέχεται ως παράμετρο το όνομα του post processor (φίλτρο) που θα
# διαχειριστεί τα επιπεδοποιημένα δεδομένα. Τα περισσότερα φίλτρα είναι awk
# scripts. Επί του παρόντος είναι διαθέσιμα τα παρακάτω φίλτρα:
#
# dump
# ----
# Το φίλτρο "dump" απλώς αντιγράφει το input στο output χωρίς να προβεί σε
# καμία περαιτέρω επξεργασία. Συνήθως χρησιμοποιείται κατά το debugging και
# γενικότερα για λόγους εξέτασης και μελέτης των δεδομένων.
#
# normal
# ------
# Το φίλτρο "normal" εκτυπώνει τα δεδομένα σε κανονικοποιημένη μορφή, πράγμα
# που σημαίνει ότι σε περίπτωση που υπάρχουν περισσότεροι από ένας κάτοχοι, θα
# εκτυπωθεί μια γραμμή για κάθε κάτοχο, ενώ στην περίπτωση που το όχημα δεν
# διαθέτει κατόχους, θα τυπωθεί μια γραμμή με κενάσ τοιχεία κατόχου. Ωστόσο,
# by default το εν λόγω φίλτρο εκτυπώνει μόνο μια γραμμή για κάθε όχημα που
# διαβάζει και μάλιστα μόνο στην περίπτωση που το όχημα διαθέτει ακριβώς έναν
# κάτοχο. Ακριβώς για τους λόγους αυτούς το φίλτρο δέχεται τις παρακάτω
# options:
#
#	--multi	Αν δοθεί η option "--multi" το πρόγραμμα θα εκτυπώσει από μια
#		γραμμή για κάθε κάτοχο, επαναλαμβάνοντας τα δεδομένα οχήματος
#		σε κάθε γραμμή.
#
#	--none	Αν δοθεί η option "--none" τότε το πρόγραμμα θα εκτυπώσει
#		δεδομένα οχήματος με κενά στοιχεία κατόχου και μηδενικό
#		ποσοστό ιδιοκτησίας.
#
###############################################################################@

. "${PANDORA_BASEDIR:=/var/opt/pandora}/lib/pandora.sh"
pd_errlevel=
libdir="${CHT_BASEDIR:=/var/opt/cht}/lib/govHUB"

pd_usagemsg="filter [OPTIONS] [FILES]

Filters:
normal [-n] [-m] [--none] [--multi]
dump"

if [ $# -lt 1 ]; then
	filtro="dump"
else
	filtro="${1}"
	shift
fi

parser() {
	jq \
	--stream \
	--from-file "${libdir}/carparse.jq" \
	--monochrome-output \
	--raw-output \
	--compact-output \
	"$@"
}

unset awk_opts
awk_opts="${awk_opts} -i ${PANDORA_BASEDIR}/lib/pandora.awk"
awk_opts="${awk_opts} -i ${libdir}/carparse_ante.awk"

case "${filtro}" in

normal)
	eval set -- "$(pd_parseopts "nm" "none,multi" "$@")"
	[ $1 -ne 0 ] && pd_usage
	shift

	for arg in "$@"
	do
		case "${arg}" in
		-n|--none)
			awk_opts="${awk_opts} -v none=yes"
			shift
			;;

		-m|--multi)
			awk_opts="${awk_opts} -v multi=yes"
			shift
			;;

		--)
			shift
			;;
		esac
	done
	unset arg

	parser "$@" | awk ${awk_opts} -f "${libdir}/carparse_normal.awk"
	;;

dump)
	parser "$@" | awk ${awk_opts} '{ print }'
	;;

*)
	pd_error "${pd_progname}: ${filtro}: invalid filter name"
	pd_usage
	;;

esac
